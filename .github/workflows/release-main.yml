# .github/workflows/release-main.yml
name: Build & Test for main (PR + post-merge)

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  TEST_PORT: 5007
  TEST_URL: http://localhost:5007
  LOCAL_IMAGE: app:${{ github.sha }}
  OWNER: ${{ github.repository_owner }}
  PACKAGE_NAME: shay-final-project
  LATEST_TAG: latest

jobs:
  # PR validation: build + smoke test only
  validate-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      - name: Build container image
        run: docker build -t "$LOCAL_IMAGE" .

      - name: Run & wait (smoke)
        run: |
          docker run -d -p ${TEST_PORT}:${TEST_PORT} --name app "$LOCAL_IMAGE"
          for i in {1..60}; do
            code=$(curl -sS -o /dev/null -w "%{http_code}" "${TEST_URL}" || true)
            [ "$code" = "200" ] && break
            echo "Waiting ($i/60)... code=$code"; sleep 2
          done
          [ "$code" = "200" ] || { echo "App not ready"; docker logs app; exit 1; }

      - name: "QA: /"
        run: |
          html=$(curl -sS -L "${TEST_URL}")
          echo "$html" | grep -q "Welcome to Shay's Final Project"

      - name: "QA: /hello/Shay"
        run: |
          html=$(curl -sS -L "${TEST_URL}/hello/Shay")
          echo "$html" | grep -q "Shay, you are a champion!"

      - name: "QA: /hello/Noy"
        run: |
          html=$(curl -sS -L "${TEST_URL}/hello/Noy")
          echo "$html" | grep -q "Hello, Noy"

      - name: "Negative: /shay returns 404"
        run: |
          code=$(curl -sS -o /dev/null -w "%{http_code}" "${TEST_URL}/shay" || true)
          [ "$code" = "404" ] || { echo "Expected 404, got $code"; exit 1; }

  # Post-merge: full pipeline + push image
  post-merge:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: App

    steps:
      - uses: actions/checkout@v4

      - name: Build container image
        working-directory: .
        run: docker build -t "$LOCAL_IMAGE" .

      - name: Run & wait (smoke)
        working-directory: .
        run: |
          docker run -d -p ${TEST_PORT}:${TEST_PORT} --name app "$LOCAL_IMAGE"
          for i in {1..60}; do
            code=$(curl -sS -o /dev/null -w "%{http_code}" "${TEST_URL}" || true)
            [ "$code" = "200" ] && break
            echo "Waiting ($i/60)... code=$code"; sleep 2
          done
          [ "$code" = "200" ] || { echo "App not ready"; docker logs app; exit 1; }

      - name: Stop container
        if: always()
        working-directory: .
        run: docker rm -f app || true

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag + push to GHCR (custom name)
        run: |
          IMAGE_SHA="ghcr.io/${OWNER}/${PACKAGE_NAME}:${GITHUB_SHA}"
          IMAGE_LATEST="ghcr.io/${OWNER}/${PACKAGE_NAME}:${LATEST_TAG}"

          docker tag "$LOCAL_IMAGE" "$IMAGE_SHA"
          docker tag "$LOCAL_IMAGE" "$IMAGE_LATEST"

          docker push "$IMAGE_SHA"
          docker push "$IMAGE_LATEST"

